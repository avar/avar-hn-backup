{
  "by" : "avar",
  "id" : 11512775,
  "kids" : [ 11512916 ],
  "parent" : 11512626,
  "text" : "I don&#x27;t mean to sound dismissive, but do you have any idea of how O_APPEND interacts with PIPE_BUF? The problem you&#x27;re describing is basically solved on modern POSIX OS&#x27;s.<p>You&#x27;re just proposing moving the semantics of what could be better done in kernel-space by resizing PIPE_BUF to userspace.<p>The way this works now is that you open a logfile with O_APPEND, any write(2) you make to the file will be atomic up to PIPE_BUF, so it doesn&#x27;t matter that you have a &quot;race&quot; with someone else if everyone&#x27;s write is &lt;PIPE_BUF, which is the common case, they won&#x27;t interleave with each other.<p>Now of course if your write is bigger than PIPE_BUF you might have interleaving writes, but at the point where you&#x27;re making &gt;4K writes you&#x27;re usually better off having some custom log system anyway and not rely on the kernel serializing things for you.<p>If you want to emulate this proposed mechanism of yours now without any syscall changes you can simply flock() the file for the duration of your write. The solution you&#x27;re proposing already exists, but locking sucks more than O_APPEND + &lt;PIPE_BUF sized writes.",
  "time" : 1460849021,
  "type" : "comment"
}
