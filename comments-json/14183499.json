{
  "by" : "avar",
  "id" : 14183499,
  "kids" : [ 14183707, 14184703 ],
  "parent" : 14180564,
  "text" : "<p><pre><code>    &gt; I&#x27;ll never understand why they thought 0-based\n    &gt; months made sense, but then used 1-based days\n    &gt; and 1900-based years. Even if C did it[...]\n</code></pre>\nJava, Perl etc. all copied this pattern from localtime() in C. In all of\nthese languages it&#x27;s idiomatic to write something like:<p><pre><code>    printf(&quot;%s %d, %d\\n&quot;, mnames[mon], mday, year);\n</code></pre>\nTo print out e.g. &quot;January 6, 78&quot;. The reason month days aren&#x27;t zero\nbased is obvious, usually when you use them you aren&#x27;t going to have\ngo through a lookup table, whereas nobody calls January &quot;0&quot; or &quot;1&quot;, so you&#x27;ll always need a lookup table.<p>Indexing months by 1 would mean declaring the &quot;mnames&quot; array would be the un-idoimatic:<p><pre><code>    char *mname[] = { NULL, &quot;Jan&quot;, ... };\n</code></pre>\nInstead of:<p><pre><code>    char *mname[] = { &quot;Jan&quot;, ... };\n</code></pre>\nOr you&#x27;d need to use the latter form and do lookups by mnames[mon - 1] instead of mnames[mon].<p>The reason you have to add 1900 to the year is that when C was made it\nwas standard for software to use two-digit years, and if you told some\nof C&#x27;s designers back in the 70s that we&#x27;d still be using &amp; discussing\nthese APIs in 2017 they&#x27;d probably have laughed at you.<p>Of course sometimes you need to use month indexes themselves, e.g. if you wanted to print out 1978-01-06 in a log file:<p><pre><code>    printf(&quot;%d-%d-%d...\\n&quot;, year + 1900, mon + 1, mday, ...);\n</code></pre>\nBut such are the trade-offs of low-level API design. I guess C&#x27;s designers took the inherent idiomaticness of zero-based indexes &amp; expectation that the common case would to print out month names over such use-cases.",
  "time" : 1493035024,
  "type" : "comment"
}
