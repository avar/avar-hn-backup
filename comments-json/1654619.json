{
  "by" : "avar",
  "id" : 1654619,
  "kids" : [ 1655020, 1654788, 1655949, 1654756 ],
  "parent" : 1654164,
  "text" : "My .emacs is on GitHub: <a href=\"http://github.com/avar/dotemacs/blob/master/.emacs\" rel=\"nofollow\">http://github.com/avar/dotemacs/blob/master/.emacs</a> along with the elisp library I use <a href=\"http://github.com/avar/elisp\" rel=\"nofollow\">http://github.com/avar/elisp</a><p>Some noteworthy things:<p>It's a ~1200 line file (and expanding) this is how I navigate it:<p><pre><code>    (defun show-dot-emacs-structure ()\n      \"Show the outline-mode structure of ~/.emacs\"\n      (interactive)\n      (occur \"^;;;;+\"))\n</code></pre>\nWhich shows the outline of the file, e.g.:<p><pre><code>    74 matches for \"^;;;;+\" in buffer: .emacs\n     57:;;;; Debugging\n     67:;;;; Load paths\n    112:;;;; Emacs' interface\n    229:;;;; User info\n    236:;;;; Encoding\n    253:;;;; Indenting\n    273:;;;;; Per-project indentation settings\n    275:;;;;;; Git\n</code></pre>\nA quiet startup:<p><pre><code>    ;; Don't display the 'Welcome to GNU Emacs' buffer on startup\n    (setq inhibit-startup-message t)\n    \n    ;; Display this instead of \"For information about GNU Emacs and the\n    ;; GNU system, type C-h C-a.\". This has been made intentionally hard\n    ;; to customize in GNU Emacs so I have to resort to hackery.\n    (defun display-startup-echo-area-message ()\n      \"If it wasn't for this you'd be GNU/Spammed by now\"\n      (message \"\"))\n    \n    ;; Don't insert instructions in the *scratch* buffer\n    (setq initial-scratch-message nil)\n</code></pre>\nCore UI settings:<p><pre><code>    ;; Display the line and column number in the modeline\n    (setq line-number-mode t)\n    (setq column-number-mode t)\n    (line-number-mode t)\n    (column-number-mode t)\n    \n    ;; syntax highlight everywhere\n    (global-font-lock-mode t)\n    \n    ;; Show matching parens (mixed style)\n    (show-paren-mode t)\n    (setq show-paren-delay 0.0)\n    \n    ;; 'mixed highligts the whole sexp making it unreadable, maybe tweak\n    ;; color display?\n    (setq show-paren-style 'parenthesis)\n    \n    ;; Highlight selection\n    (transient-mark-mode t)\n    \n    ;; make all \"yes or no\" prompts show \"y or n\" instead\n    (fset 'yes-or-no-p 'y-or-n-p)\n</code></pre>\nChanging the switching is worth it, but I really need to find\nsomething that allows me to &#60;TAB&#62; between different possibilities once\ncompletion is exhausted, e.g. if I say \"foo.c\" and have both \"foo.c\"\nand \"foo.c.txt\":<p><pre><code>    ;; Switching\n    (iswitchb-mode 1)\n    (icomplete-mode 1)\n</code></pre>\nI wish I could also turn off the annoying #-files, but they're\nhardcoded in Emacs's C code:<p><pre><code>    ;; I use version control, don't annoy me with backup files everywhere\n    (setq make-backup-files nil)\n    (setq auto-save-default nil)\n</code></pre>\nBetter file selection:<p><pre><code>    ;;; Electric minibuffer!\n    ;;; When selecting a file to visit, // will mean / and\n    ;;; ~ will mean $HOME regardless of preceding text.\n    (setq file-name-shadow-tty-properties '(invisible t))\n    (file-name-shadow-mode 1)\n</code></pre>\nI didn't write this, but it's very useful. It emulates vim's sofftab feature. So indenting with spaces doesn't suck anymore.<p><pre><code>    (defun backward-delete-whitespace-to-column ()\n      \"delete back to the previous column of whitespace, or just one\n    char if that's not possible. This emulates vim's softtabs\n    feature.\"\n      (interactive)\n      (if indent-tabs-mode\n          (call-interactively 'backward-delete-char-untabify)\n        ;; let's get to work\n        (let ((movement (% (current-column) tab-width))\n              (p (point)))\n          ;; brain freeze, should be easier to calculate goal\n          (when (= movement 0) (setq movement tab-width))\n          (if (save-excursion\n                (backward-char movement)\n                (string-match \"^\\\\s-+$\" (buffer-substring-no-properties (point) p)))\n              (delete-region (- p movement) p)\n            (call-interactively 'backward-delete-char-untabify)))))\n    \n    (global-set-key (kbd \"&#60;DEL&#62;\") 'backward-delete-whitespace-to-column)\n</code></pre>\nI <i>really</i> wish I could find something for Emacs which <i>automatically</i>\ndetects the style of the code I'm editing and switches the coding\nstyle to that.<p>For libraries I use (eval-after-load) for everything and\n(autoload). It really speeds up startup.<p>ack is a much better M-x grep (needs ack.el):<p><pre><code>    ;;;;; ack\n    (defalias 'grep 'ack)\n</code></pre>\nI have something to make swank work with clojure <i>and</i> sbcl, but it's\ntoo large to include here. clojure-mode et al make it <i>really</i> hard to\ndo this, unfortunately (upstream isn't really interested in this use\ncase):<p><pre><code>    (defun run-clojure ()\n      \"Starts clojure in Slime\"\n      (interactive)\n      (pre-slime)\n      (slime 'clojure))\n    \n    (defun run-sbcl ()\n      \"Starts SBCL in Slime\"\n      (interactive)\n      (pre-slime)\n      (slime 'sbcl))\n</code></pre>\nYou should use nopaste.el (shameless plug): <a href=\"http://github.com/avar/nopaste\" rel=\"nofollow\">http://github.com/avar/nopaste</a><p><pre><code>    ;;;;; nopaste.el\n    (autoload 'nopaste \"nopaste\" nil t)\n    \n    (eval-after-load \"nopaste\"\n      '(progn\n         (setq nopaste-nickname \"avar\")\n         (setq nopaste-channel  nil)\n         (setq nopaste-description nil)))\n    \n    (global-set-key (kbd \"C-c n p\") 'nopaste)\n    (global-set-key (kbd \"C-c n y\") 'nopaste-yank-url)\n</code></pre>\nHere's how I still tolerate GMail and other web apps. I can click on\nany text field in Chrome and edit it in Emacs:<p><pre><code>    ;;;;; Emacs Chrome edit server - http://wiki.github.com/stsquad/emacs_chrome/\n    (when (getenv \"DISPLAY\")\n      (require 'edit-server)\n      (setq edit-server-new-frame nil)\n      (add-hook 'edit-server-done-hook 'on-edit-server-done-do-backup)\n      (edit-server-start))\n</code></pre>\nAnd this has saved my many a time from losing web form content (I\nshould really make this use Git):<p><pre><code>    (defun on-edit-server-done-do-backup ()\n      \"Run when text is sent to Google Chrome. Do a backup of the\n    stuff sent there in case something goes wrong, e.g. Chrome\n    crashes.\"\n      (let* ((backup-dir \"~/._emacs_chrome-backup\")\n            (backup-file (format \"%s.txt\" (float-time)))\n            (backup-path (concat backup-dir \"/\" backup-file)))\n        (unless (file-directory-p backup-dir)\n          (make-directory backup-dir))\n        (write-region (point-min) (point-max) backup-path)))\n    </code></pre>\nInstall browse-kill-ring.el <i>now</i>:<p><pre><code>    (global-set-key (kbd \"C-c k\") 'browse-kill-ring)\n</code></pre>\nThat's about it for the really interesting stuff. But there's a lot of\nother mundane stuff in there.",
  "time" : 1283381763,
  "type" : "comment"
}
